// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/features/data/models/department_id_model.dart';
import 'app/features/data/models/departments_model.dart';
import 'app/features/data/models/object_id_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2005382772286482214),
      name: 'DepartmentIdModel',
      lastPropertyId: const obx_int.IdUid(3, 4318745208563361530),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5762214532375241073),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3003926016077999899),
            name: 'total',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4318745208563361530),
            name: 'objectIDs',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5475996658203390412),
      name: 'DepartmentModel',
      lastPropertyId: const obx_int.IdUid(3, 7190084115167499356),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2350785078065324102),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6403487009252886625),
            name: 'departmentId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7190084115167499356),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1329421160356030135),
      name: 'ObjectIdModel',
      lastPropertyId: const obx_int.IdUid(7, 4584109204548615607),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3090068201813187168),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4296559971420567934),
            name: 'departmentIds',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3109092497442005793),
            name: 'primaryImageSmall',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8976986827056688994),
            name: 'culture',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1147415214413816624),
            name: 'department',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8128210964047801124),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4584109204548615607),
            name: 'objectName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 1329421160356030135),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    DepartmentIdModel: obx_int.EntityDefinition<DepartmentIdModel>(
        model: _entities[0],
        toOneRelations: (DepartmentIdModel object) => [],
        toManyRelations: (DepartmentIdModel object) => {},
        getId: (DepartmentIdModel object) => object.id,
        setId: (DepartmentIdModel object, int id) {
          object.id = id;
        },
        objectToFB: (DepartmentIdModel object, fb.Builder fbb) {
          final objectIDsOffset = fbb.writeListInt64(object.objectIDs);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.total);
          fbb.addOffset(2, objectIDsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final totalParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final objectIDsParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []);
          final object = DepartmentIdModel(
              id: idParam, total: totalParam, objectIDs: objectIDsParam);

          return object;
        }),
    DepartmentModel: obx_int.EntityDefinition<DepartmentModel>(
        model: _entities[1],
        toOneRelations: (DepartmentModel object) => [],
        toManyRelations: (DepartmentModel object) => {},
        getId: (DepartmentModel object) => object.id,
        setId: (DepartmentModel object, int id) {
          object.id = id;
        },
        objectToFB: (DepartmentModel object, fb.Builder fbb) {
          final displayNameOffset = fbb.writeString(object.displayName);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.departmentId);
          fbb.addOffset(2, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final departmentIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = DepartmentModel(
              id: idParam,
              departmentId: departmentIdParam,
              displayName: displayNameParam);

          return object;
        }),
    ObjectIdModel: obx_int.EntityDefinition<ObjectIdModel>(
        model: _entities[2],
        toOneRelations: (ObjectIdModel object) => [],
        toManyRelations: (ObjectIdModel object) => {},
        getId: (ObjectIdModel object) => object.id,
        setId: (ObjectIdModel object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectIdModel object, fb.Builder fbb) {
          final primaryImageSmallOffset =
              fbb.writeString(object.primaryImageSmall);
          final cultureOffset = fbb.writeString(object.culture);
          final departmentOffset = fbb.writeString(object.department);
          final titleOffset = fbb.writeString(object.title);
          final objectNameOffset = fbb.writeString(object.objectName);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.departmentIds);
          fbb.addOffset(2, primaryImageSmallOffset);
          fbb.addOffset(3, cultureOffset);
          fbb.addOffset(4, departmentOffset);
          fbb.addOffset(5, titleOffset);
          fbb.addOffset(6, objectNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final departmentIdsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final primaryImageSmallParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final cultureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final departmentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final objectNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = ObjectIdModel(
              id: idParam,
              departmentIds: departmentIdsParam,
              primaryImageSmall: primaryImageSmallParam,
              culture: cultureParam,
              department: departmentParam,
              title: titleParam,
              objectName: objectNameParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DepartmentIdModel] entity fields to define ObjectBox queries.
class DepartmentIdModel_ {
  /// See [DepartmentIdModel.id].
  static final id =
      obx.QueryIntegerProperty<DepartmentIdModel>(_entities[0].properties[0]);

  /// See [DepartmentIdModel.total].
  static final total =
      obx.QueryIntegerProperty<DepartmentIdModel>(_entities[0].properties[1]);

  /// See [DepartmentIdModel.objectIDs].
  static final objectIDs = obx.QueryIntegerVectorProperty<DepartmentIdModel>(
      _entities[0].properties[2]);
}

/// [DepartmentModel] entity fields to define ObjectBox queries.
class DepartmentModel_ {
  /// See [DepartmentModel.id].
  static final id =
      obx.QueryIntegerProperty<DepartmentModel>(_entities[1].properties[0]);

  /// See [DepartmentModel.departmentId].
  static final departmentId =
      obx.QueryIntegerProperty<DepartmentModel>(_entities[1].properties[1]);

  /// See [DepartmentModel.displayName].
  static final displayName =
      obx.QueryStringProperty<DepartmentModel>(_entities[1].properties[2]);
}

/// [ObjectIdModel] entity fields to define ObjectBox queries.
class ObjectIdModel_ {
  /// See [ObjectIdModel.id].
  static final id =
      obx.QueryIntegerProperty<ObjectIdModel>(_entities[2].properties[0]);

  /// See [ObjectIdModel.departmentIds].
  static final departmentIds =
      obx.QueryIntegerProperty<ObjectIdModel>(_entities[2].properties[1]);

  /// See [ObjectIdModel.primaryImageSmall].
  static final primaryImageSmall =
      obx.QueryStringProperty<ObjectIdModel>(_entities[2].properties[2]);

  /// See [ObjectIdModel.culture].
  static final culture =
      obx.QueryStringProperty<ObjectIdModel>(_entities[2].properties[3]);

  /// See [ObjectIdModel.department].
  static final department =
      obx.QueryStringProperty<ObjectIdModel>(_entities[2].properties[4]);

  /// See [ObjectIdModel.title].
  static final title =
      obx.QueryStringProperty<ObjectIdModel>(_entities[2].properties[5]);

  /// See [ObjectIdModel.objectName].
  static final objectName =
      obx.QueryStringProperty<ObjectIdModel>(_entities[2].properties[6]);
}
