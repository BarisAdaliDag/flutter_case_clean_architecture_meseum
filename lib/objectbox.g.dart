// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/features/data/models/departments_model.dart';
import 'app/features/data/models/object_model.dart';
import 'app/features/data/models/objects_id_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5475996658203390412),
      name: 'DepartmentModel',
      lastPropertyId: const obx_int.IdUid(3, 7190084115167499356),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2350785078065324102),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6403487009252886625),
            name: 'departmentId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7190084115167499356),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 5806641028288434369),
      name: 'ObjectModel',
      lastPropertyId: const obx_int.IdUid(18, 4095199526839443258),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9075708574073163943),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3379168914037494507),
            name: 'primaryImageSmall',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2785635296157797548),
            name: 'culture',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 300564792458783477),
            name: 'department',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3542570408666178654),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8110009432797247021),
            name: 'objectName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4653290671082455133),
            name: 'objectID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7286584604134237700),
            name: 'objectDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6019066050721474700),
            name: 'country',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4486955614193767678),
            name: 'region',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4726389520654308950),
            name: 'creditLine',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3546914738378389399),
            name: 'accessionNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 900861678348562936),
            name: 'dimensions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8679726603724706839),
            name: 'medium',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5000747988446071560),
            name: 'geographyType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 8087451861539367129),
            name: 'classification',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 4095199526839443258),
            name: 'category',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8372765202816072250),
      name: 'ObjectsIdModel',
      lastPropertyId: const obx_int.IdUid(3, 4914825977522452698),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8854064509654213253),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5545932228813138534),
            name: 'total',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4914825977522452698),
            name: 'objectIDs',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 8372765202816072250),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2005382772286482214, 1329421160356030135],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5762214532375241073,
        3003926016077999899,
        4318745208563361530,
        3090068201813187168,
        4296559971420567934,
        3109092497442005793,
        8976986827056688994,
        1147415214413816624,
        8128210964047801124,
        4584109204548615607,
        325006578264002764
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    DepartmentModel: obx_int.EntityDefinition<DepartmentModel>(
        model: _entities[0],
        toOneRelations: (DepartmentModel object) => [],
        toManyRelations: (DepartmentModel object) => {},
        getId: (DepartmentModel object) => object.id,
        setId: (DepartmentModel object, int id) {
          object.id = id;
        },
        objectToFB: (DepartmentModel object, fb.Builder fbb) {
          final displayNameOffset = fbb.writeString(object.displayName);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.departmentId);
          fbb.addOffset(2, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final departmentIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = DepartmentModel(
              id: idParam,
              departmentId: departmentIdParam,
              displayName: displayNameParam);

          return object;
        }),
    ObjectModel: obx_int.EntityDefinition<ObjectModel>(
        model: _entities[1],
        toOneRelations: (ObjectModel object) => [],
        toManyRelations: (ObjectModel object) => {},
        getId: (ObjectModel object) => object.id,
        setId: (ObjectModel object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectModel object, fb.Builder fbb) {
          final primaryImageSmallOffset = object.primaryImageSmall == null
              ? null
              : fbb.writeString(object.primaryImageSmall!);
          final cultureOffset =
              object.culture == null ? null : fbb.writeString(object.culture!);
          final departmentOffset = object.department == null
              ? null
              : fbb.writeString(object.department!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final objectNameOffset = object.objectName == null
              ? null
              : fbb.writeString(object.objectName!);
          final objectDateOffset = object.objectDate == null
              ? null
              : fbb.writeString(object.objectDate!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          final regionOffset =
              object.region == null ? null : fbb.writeString(object.region!);
          final creditLineOffset = object.creditLine == null
              ? null
              : fbb.writeString(object.creditLine!);
          final accessionNumberOffset = object.accessionNumber == null
              ? null
              : fbb.writeString(object.accessionNumber!);
          final dimensionsOffset = object.dimensions == null
              ? null
              : fbb.writeString(object.dimensions!);
          final mediumOffset =
              object.medium == null ? null : fbb.writeString(object.medium!);
          final geographyTypeOffset = object.geographyType == null
              ? null
              : fbb.writeString(object.geographyType!);
          final classificationOffset = object.classification == null
              ? null
              : fbb.writeString(object.classification!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, primaryImageSmallOffset);
          fbb.addOffset(3, cultureOffset);
          fbb.addOffset(4, departmentOffset);
          fbb.addOffset(5, titleOffset);
          fbb.addOffset(6, objectNameOffset);
          fbb.addInt64(7, object.objectID);
          fbb.addOffset(8, objectDateOffset);
          fbb.addOffset(9, countryOffset);
          fbb.addOffset(10, regionOffset);
          fbb.addOffset(11, creditLineOffset);
          fbb.addOffset(12, accessionNumberOffset);
          fbb.addOffset(13, dimensionsOffset);
          fbb.addOffset(14, mediumOffset);
          fbb.addOffset(15, geographyTypeOffset);
          fbb.addOffset(16, classificationOffset);
          fbb.addOffset(17, categoryOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final objectIDParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final primaryImageSmallParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final cultureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final departmentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final objectNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final countryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final regionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final creditLineParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final accessionNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final dimensionsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final mediumParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final geographyTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34);
          final classificationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final objectDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = ObjectModel(
              id: idParam,
              objectID: objectIDParam,
              category: categoryParam,
              primaryImageSmall: primaryImageSmallParam,
              culture: cultureParam,
              department: departmentParam,
              title: titleParam,
              objectName: objectNameParam,
              country: countryParam,
              region: regionParam,
              creditLine: creditLineParam,
              accessionNumber: accessionNumberParam,
              dimensions: dimensionsParam,
              medium: mediumParam,
              geographyType: geographyTypeParam,
              classification: classificationParam,
              objectDate: objectDateParam);

          return object;
        }),
    ObjectsIdModel: obx_int.EntityDefinition<ObjectsIdModel>(
        model: _entities[2],
        toOneRelations: (ObjectsIdModel object) => [],
        toManyRelations: (ObjectsIdModel object) => {},
        getId: (ObjectsIdModel object) => object.id,
        setId: (ObjectsIdModel object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectsIdModel object, fb.Builder fbb) {
          final objectIDsOffset = fbb.writeListInt64(object.objectIDs);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.total);
          fbb.addOffset(2, objectIDsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final totalParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final objectIDsParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []);
          final object = ObjectsIdModel(
              id: idParam, total: totalParam, objectIDs: objectIDsParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DepartmentModel] entity fields to define ObjectBox queries.
class DepartmentModel_ {
  /// See [DepartmentModel.id].
  static final id =
      obx.QueryIntegerProperty<DepartmentModel>(_entities[0].properties[0]);

  /// See [DepartmentModel.departmentId].
  static final departmentId =
      obx.QueryIntegerProperty<DepartmentModel>(_entities[0].properties[1]);

  /// See [DepartmentModel.displayName].
  static final displayName =
      obx.QueryStringProperty<DepartmentModel>(_entities[0].properties[2]);
}

/// [ObjectModel] entity fields to define ObjectBox queries.
class ObjectModel_ {
  /// See [ObjectModel.id].
  static final id =
      obx.QueryIntegerProperty<ObjectModel>(_entities[1].properties[0]);

  /// See [ObjectModel.primaryImageSmall].
  static final primaryImageSmall =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[1]);

  /// See [ObjectModel.culture].
  static final culture =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[2]);

  /// See [ObjectModel.department].
  static final department =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[3]);

  /// See [ObjectModel.title].
  static final title =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[4]);

  /// See [ObjectModel.objectName].
  static final objectName =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[5]);

  /// See [ObjectModel.objectID].
  static final objectID =
      obx.QueryIntegerProperty<ObjectModel>(_entities[1].properties[6]);

  /// See [ObjectModel.objectDate].
  static final objectDate =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[7]);

  /// See [ObjectModel.country].
  static final country =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[8]);

  /// See [ObjectModel.region].
  static final region =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[9]);

  /// See [ObjectModel.creditLine].
  static final creditLine =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[10]);

  /// See [ObjectModel.accessionNumber].
  static final accessionNumber =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[11]);

  /// See [ObjectModel.dimensions].
  static final dimensions =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[12]);

  /// See [ObjectModel.medium].
  static final medium =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[13]);

  /// See [ObjectModel.geographyType].
  static final geographyType =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[14]);

  /// See [ObjectModel.classification].
  static final classification =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[15]);

  /// See [ObjectModel.category].
  static final category =
      obx.QueryStringProperty<ObjectModel>(_entities[1].properties[16]);
}

/// [ObjectsIdModel] entity fields to define ObjectBox queries.
class ObjectsIdModel_ {
  /// See [ObjectsIdModel.id].
  static final id =
      obx.QueryIntegerProperty<ObjectsIdModel>(_entities[2].properties[0]);

  /// See [ObjectsIdModel.total].
  static final total =
      obx.QueryIntegerProperty<ObjectsIdModel>(_entities[2].properties[1]);

  /// See [ObjectsIdModel.objectIDs].
  static final objectIDs = obx.QueryIntegerVectorProperty<ObjectsIdModel>(
      _entities[2].properties[2]);
}
